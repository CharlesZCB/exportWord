package com.bster.util;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import sun.misc.BASE64Encoder;
import freemarker.template.Configuration;
import freemarker.template.Template;

public class WordExportUtil {
	 private static WordExportUtil service = null; 
	 private static String templateFilePath=null;

	    private WordExportUtil() {
	        super();
	    }
	    
	    public static WordExportUtil getInstance(String path) {
	        if(service == null) {
	            synchronized(WordExportUtil.class){
	                if(service == null) {
	                    service = new WordExportUtil();
	                    templateFilePath=service.getClass().getClassLoader().getResource(path).getPath();
	                }
	            }
	        }
	        return service;
	    }

	    
	    
	    /**
	     * 
	     * @param templateFilePath  eg: /template/test/test.ftl
	     * @param dataMap
	     * @param exportFilePath  eg: /tmp/test/test123.doc
	     * @param loadType  设置路径加载方式。1-绝对路径，2-项目相对路径
	     * @return
	     * @throws Exception 
	     */
	    public File createDocFile(Map<String, Object> dataMap) throws Exception {
	        Template t = null;
	        Configuration configuration = new Configuration(Configuration.VERSION_2_3_28);
	        configuration.setDefaultEncoding("UTF-8");
	        Writer out = null;
	        String exportFilePath=this.getClass().getClassLoader().getResource("exportWordTemplate/").getPath()+System.currentTimeMillis()+".doc";
	        File outFile = new File(exportFilePath);
	        FileOutputStream fileOutputStream =null;
	        OutputStreamWriter outputStreamWriter =null;
	        try {
//	        	if(outFile.exists()){
//	        		outFile.createNewFile();
//	        	}
	        	
	            templateFilePath = pathReplace(templateFilePath); 
	            String ftlPath = templateFilePath.substring(0, templateFilePath.lastIndexOf("/"));
//	            if(loadType == 1) {
	                configuration.setDirectoryForTemplateLoading(new File(ftlPath)); // FTL文件所存在的位置
//	            }else {
//	                configuration.setClassForTemplateLoading(this.getClass(), ftlPath);//以类加载的方式查找模版文件路径
//	            }
	            
	            String ftlFile = templateFilePath.substring(templateFilePath.lastIndexOf("/")+1);
	            t = configuration.getTemplate(ftlFile); // 模板文件名
	            fileOutputStream= new FileOutputStream(outFile);
	            outputStreamWriter= new OutputStreamWriter(fileOutputStream,"utf-8");
	            out = new BufferedWriter(outputStreamWriter);
	            
	            t.process(dataMap, out);
	        } catch (Exception e) {
	            throw e;
	        }finally{
	        	if(fileOutputStream!=null)
	        		fileOutputStream.close();
	        	if(outputStreamWriter!=null)
	        		outputStreamWriter.close();
	        	if(out!=null)
	        		out.close();
	        }
	        
	        return outFile;
	    }
	    
	 // 将图片转换成BASE64字符串
	    public static String getImageString(String imgname) throws IOException {
	        //1、校验是否为空  
	        if(imgname==null || imgname.trim().length()<=0){return "";}  
	          
	        //2、校验文件是否为目录或者是否存在  
	        File picFile = new File(imgname);  
	        if(picFile.isDirectory() || (!picFile.exists())) return "";  
	          
	        //3、校验是否为图片  
	        try {    
	            BufferedImage image =ImageIO.read(picFile);    
	            if (image == null) {    
	                return "";  
	            }    
	        } catch(IOException ex) {   
	            ex.printStackTrace();  
	            return "";  
	        }  
	          
	        //4、转换成base64编码  
	        String imageStr = "";  
	        try {  
	            byte[] data = null;  
	            InputStream in = new FileInputStream(imgname);  
	            data = new byte[in.available()];  
	            in.read(data);  
	            BASE64Encoder encoder = new BASE64Encoder();  
	            imageStr = encoder.encode(data);  
	        } catch (Exception e) {  
	            imageStr="";  
	            e.printStackTrace();  
	        }  
	          
	        return imageStr;  
	    }  
	
	    
	    /**
	     *  把路径的\替换成/
	     * @param path
	     * @return
	     */
	    private String pathReplace(String path) {
	        while(path != null && path.contains("\\")) {
	            path = path.replace("\\", "/");
	        }
	        return path;
	    }
	    
//	    public static void main(String[] args) throws Exception{
//	        Map<String, Object> dataMap = new HashMap<String, Object>();
//	        getData(dataMap);
//	        String templateFile = "H:\\Desktop\\project.ftl";
//	        String exportFile = "H:\\Desktop\\test.doc";
//	                
//	        try {
//	            WordExportUtil.getInstance().createDocFile(templateFile, dataMap, exportFile, 1);
//	        } catch (Exception e) {
//	            // TODO Auto-generated catch block
//	            e.printStackTrace();
//	        }
//	    }
//
//	    /**
//	     * 测试用的
//	     * @param dataMap
//	     */
//	    public static void getData(Map<String, Object> dataMap) throws Exception{
//	        dataMap.put("title", "超级无敌妈妈");
//	        dataMap.put("projectName", "牛逼来赛");
//	        //dataMap.put("img",getImageString("C:/Users/Public/Pictures/Sample Pictures/3.png"));
//	    }
}
